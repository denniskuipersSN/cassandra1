# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:

  ### Variables ###
  repoUserName: '$(REPO_USERNAME)'
  repoPAT: '$(REPO_PAT)'
  repoPrefix: '$(REPO_PREFIX)'
  serviceName: $(SERVICE_NAME)
  serviceNamespace: $(SERVICE_NAMESPACE)  

pool:
  vmImage: ubuntu-latest

stages:

  ##############################################################################
  ###                                 RUN TESTS                              ###
  ##############################################################################
  - stage: Run_Tests
    jobs:
      - job: Run_Tests
        steps:
        - bash: |
            set -x # Echo Commands
            # Install Tools
            pip install -U pytest pytest-html pytest-xdist pytest-nunit
            # Change Dir
            cd tests/$(serviceName)
            # Run Tests
            pytest --verbose --nunitxml=TEST-results.xml
          displayName: 'Running Tests'  
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/tests/$(serviceName)'
            testRunTitle: '$(serviceName)-1.0.$(build.buildId)-tests'
          displayName: 'Publishing Results'
  ##############################################################################
  ###                                 Upload data to DevOPs Conf             ###
  ##############################################################################
  - stage: DevOPs_Config_Upload
    jobs:
      - job: Upload
        steps:
        - task: ServiceNow-DevOps-Config-Agent-Upload-Config@1
          name: 'Uploadconfig'
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            configFile: 'kubernetes-manifests/$(serviceName).yaml'
            #configFile: 'limits.conf'
            applicationName: 'Boutique'
            uploadTarget: 'component'
            namePath: '$(serviceName)'
            dataFormat: 'yaml'
            #changesetNumber: null
            autoCommit: true
            autoValidate: true        
        - script: echo "##vso[task.setvariable variable=chngnumber;isOutput=true]$(Uploadconfig.changesetNumber)" 
          name: changeset  
##############################################################################
  ###                                Validate uploaded data.                ###
  ##############################################################################
  - stage: DevOPs_Config_validate
    dependsOn: DevOPs_Config_Upload
    condition: in(dependencies.DevOPs_Config_Upload.result, 'Succeeded')
    variables:
      varChSetName: $[stageDependencies.DevOPs_Config_Upload.Upload.outputs['changeset.chngnumber']]
    jobs:
      - job: validate
        steps:
        - script: echo $(varChSetName)
        - task: ServiceNow-DevOps-Config-Agent-Get-Snapshot@1
          name: getSnapshot
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: 'Boutique'
            changesetNumber: '$(varChSetName)'
            deployableName: 'Production_1'
          continueOnError: true    
        - task: ServiceNow-DevOps-Config-Agent-Get-Snapshot-Name@1
          name: getSnapshottask
          displayName: 'ServiceNow DevOps Config Agent Get Snapshot Name'
          inputs:
            deployableName: 'Production_1'
            script: |
                    let varsnapshot = $(getSnapshot.snapshotObjects);
                    let vardeployableName = process.argv[2];
                    let size = varsnapshot.result.length;
                    for(let i=0; i<size ;i++)
                    {
                      let obj = varsnapshot.result[i];
                      if(obj["deployable_id.name"].toLowerCase() == vardeployableName.toLowerCase())
                        console.log(obj["name"]);
                    }            
          continueOnError: true
          condition: ne(variables['getSnapshot.snapshotObjects'],'')
        - task: ServiceNow-DevOps-Config-Agent-Validate-Snapshot@1
          name: 'ValidateSnapshot'
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: 'Boutique'
            deployableName: 'Production_1'
            snapshotName: $(getSnapshottask.snapshotName)
            showResults: true
          continueOnError: true
          condition: and(ne(variables['getSnapshot.snapshotObjects'],''),ne(variables['getSnapshottask.snapshotName'],''))
        - task: ServiceNow-DevOps-Config-Agent-Get-Snapshot@1
          name: getSnapshotaftervalidation
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: 'Boutique'
            changesetNumber: '$(varChSetName)'
            deployableName: 'Production_1'
          continueOnError: true
          condition: and(ne(variables['getSnapshot.snapshotObjects'],''),ne(variables['getSnapshottask.snapshotName'],''))
        - task: ServiceNow-DevOps-Config-Agent-Get-Snapshot-Name@1
          name: getSnapshottaskAfterValidation
          displayName: 'ServiceNow DevOps Config Agent Get Snapshot Name'
          inputs:
            deployableName: 'Production_1'
            script: |
                    let varsnapshot = $(getSnapshotaftervalidation.snapshotObjects);
                    let vardeployableName = process.argv[2];
                    let size = varsnapshot.result.length;
                    for(let i=0; i<size ;i++)
                    {
                      let obj = varsnapshot.result[i];
                      if(obj["deployable_id.name"].toLowerCase() == vardeployableName.toLowerCase())
                        console.log(obj["validation"]);
                    }            
          continueOnError: true
          condition: and(ne(variables['getSnapshot.snapshotObjects'],''),ne(variables['getSnapshotaftervalidation.snapshotObjects'],''))
        - task: ServiceNow-DevOps-Config-Agent-Publish-Snapshot@1
          displayName: 'ServiceNow DevOps Config Agent Publish Snapshot'
          name: ValidationPassed
          condition: and(ne(variables['getSnapshot.snapshotObjects'],''),ne(variables['getSnapshottaskAfterValidation.snapshotName'],''),ne(variables['getSnapshottaskAfterValidation.snapshotName'],'failed'))
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: Boutique
            deployableName: 'Production_1'
            snapshotName: $(getSnapshottask.snapshotName)
        - script: |
            exit 1
          condition: and(eq(variables['getSnapshottaskAfterValidation.snapshotName'],'failed'),ne(variables['getSnapshottask.snapshotName'],''))
          continueOnError: true 
  ##############################################################################
  ###                       SERVICENOW Register Snapshot                     ###
  ##############################################################################            
  - stage: register_snapshot
    dependsOn: 
      - DevOPs_Config_Upload
      - DevOPs_Config_validate
    variables: 
      varSnapShot: $[stageDependencies.DevOPs_Config_validate.validate.outputs['getSnapshottask.snapshotName']]
      varChngNR: $[stageDependencies.DevOPs_Config_Upload.Upload.outputs['changeset.chngnumber']]
      ValidationPassed: $[stageDependencies.DevOPs_Config_validate.validate.outputs['getSnapshottaskAfterValidation.snapshotName']]
    jobs:
      - job: Register_Snapshot_agentless
        steps:
        - script: exit 1
          condition: and(eq(variables['ValidationPassed'],'failed'),ne(variables['varSnapShot'],''))
        - script: echo $(varChngNR)
        - task: ServiceNow-DevOps-Config-Agent-Register-Pipeline@1
          condition: and(eq(variables['ValidationPassed'],'passed'),ne(variables['varSnapShot'],''))
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: 'Boutique'
            snapshotName: $(varSnapShot)
        - task: ServiceNow-DevOps-Config-Agent-Register-Pipeline@1
          condition: eq(variables['varSnapShot'],'')
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            applicationName: 'Boutique'
            changesetNumber: $(varChngNR)              
  ##############################################################################
  ###               BUILD DOCKER IMAGE AND PUSH TO DOCKER HUB                ###
  ##############################################################################
  - stage: Build_Image
    jobs:
      - job: Build_Image
        steps:
        - bash: |
            set -x # Echo Commands
            # Docker Login
            echo $(repoPAT) | docker login --username $(repoUserName) --password-stdin        
            # Build Image
            export REPO_PREFIX=$(repoPrefix)
            export TAG=latest
            export IMAGE=$(repoPrefix)/$(serviceName):$TAG
            # Change Dir
            if [ $(serviceName) == "cartservice" ] 
            then
              cd src/$(serviceName)/src
            else
              cd src/$(serviceName)
            fi
            # Build Image   
            if [ $(serviceName) != "redis" ] 
            then
              docker build -t $IMAGE . && docker push $IMAGE   
            fi
          displayName: 'Building Image'
  ##############################################################################
  ###                       SERVICENOW DEVOPS CHANGE                         ###
  ##############################################################################
  - stage: DevOps_Change
    variables:
      ${{ if eq($(serviceName), 'redis') }}:
        service: 'redis-cart'
      ${{ else }}:
        service: $(serviceName)
    jobs:
      - job: DevOps_Change
        pool: server
        steps:
        - task: ServiceNow-DevOps-Server-Artifact-Registration@1
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            artifactToolIdExists: false
            artifactRegistrationPayload: |
              {
                "artifacts": [
                  {
                    "name":  "$(serviceName)",
                    "version": "1.0.$(build.buildId)",
                    "semanticVersion": "1.0.$(build.buildId)",
                    "repositoryName": "cassandra1"
                  }
                ],
                "pipelineName": "$(system.teamProject)/$(build.definitionName)",
                "taskExecutionNumber": "$(build.buildId)",
                "stageName": "$(system.jobDisplayName)",
                "attemptNumber": "$(system.jobAttempt)",
                "branchName": "$(build.sourceBranchName)"                
              }
        - task: ServiceNow-DevOps-Server-Change-Acceleration@1
          inputs:
            connectedServiceName: 'loomsalesdemoforschweiz1-CloudNative-ServiceNow DevOps Service Connection'
            snapshotName: $(varSnapShot)
            applicationName: 'Boutique'            
            changeRequestDetails: |
              {
                "setCloseCode" : true,
                "attributes": {
                  "cmdb_ci": {
                     "name": "$(service)"
                  },
                  "business_service": {
                     "name" : "Boutique_MS"
                  },
                  "assignment_group": {
                     "name": "Application Support"
                  }
                }
              }
  
  ##############################################################################
  ###                      DEPLOY IMAGE TO KUBERNETES                        ###
  ##############################################################################
  - stage: Deploy_Image
    jobs:
      - job: Deploy_Image
        steps:
        - bash: |
            set -x # Echo Commands
            # Prem Yaml
            export REPO_PREFIX=$(repoPrefix)
            # Change Dir
            if [ $(serviceName) != "redis" ]
            then
               cd src/$(serviceName) 
               # Substitute
               envsubst < ../../kubernetes-manifests/$(serviceName).yaml > ../../kubernetes-manifests/$(serviceName).subst
            else
               cat kubernetes-manifests/$(serviceName).yaml > kubernetes-manifests/$(serviceName).subst     
            fi
          displayName: 'Prepping Yaml'        
        - task: Kubernetes@1
          displayName: 'Deploying $(serviceName) Image..'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'olympus'
            namespace: $(serviceNamespace)
            command: 'apply'
            arguments: '-f kubernetes-manifests/$(serviceName).subst'
